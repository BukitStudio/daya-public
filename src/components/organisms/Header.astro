---
import Hamburger from "../atoms/Hamburger.astro";
import MainMenu from "./MainMenu.astro";
import type { Product } from "../../data/productsSchema";
import { fetchProductsSheet } from "../../data/fetchProductsSheet";
import DayaSolo from "../../assets/icons/logo/dayaSolo.svg";


const products: Product[] = await fetchProductsSheet();

// Group products by type
const grouped: Record<string, Product[]> = {};
for (const product of products) {
  const type: string = product.type?.split(",")[0]?.trim() || "Autres";
  if (!grouped[type]) grouped[type] = [];
  grouped[type].push(product);
}
const types: string[] = Object.keys(grouped);
---

<header class="header">
  <div class="nav" aria-label="Main navigation">
        <a href="/" aria-label="Accueil"><DayaSolo/> </a>
  </div>
  <div>
  <Hamburger />
  </div>


  <MainMenu />

</header>

<style>

.header {
  width: 100%;
  min-height: 60px;
  height: 60px;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  padding: 0 1rem;
  z-index: 9;
  position: sticky;
  top: -1px;
  left: 0;
  right: 0;
  background-color: transparent;
  /* transition: background-color .1s cubic-bezier(0.4,0,0.2,1), transform .3s cubic-bezier(0.4,0,0.2,1); */
  will-change: transform;
  backface-visibility: hidden;
        transform: translateZ(0);
    -webkit-transform: translateZ(0);
}
.header svg {
  height: 30px; 
  fill: var(--secondary-700);
  width: auto;

  display: block;
}



  .header.header--scrolled {
    background-color: var(--primary-700);
       transition: background-color .4s cubic-bezier(0.4,0,0.2,1), transform .3s cubic-bezier(0.4,0,0.2,1);

  }


  nav {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    margin-left: auto;
  }


</style>

<script>
import Hamburger from "../atoms/Hamburger.astro";

  // Hamburger menu toggle functionality
  const hamburgerBtn = document.querySelector("#hamburger");
  const menu = document.getElementById("main-menu");
  const nav = document.querySelector(".nav");
  function setMenuTabbable(isOpen: boolean) {
    if (!menu) return;
    const links = menu.querySelectorAll("a, button, input, select, textarea");
    links.forEach((link) => {
      (link as HTMLElement).tabIndex = isOpen ? 0 : -1;
    });
  }

  if (hamburgerBtn && menu && nav) {
    hamburgerBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      const expanded = hamburgerBtn.getAttribute("aria-expanded") === "true";
      hamburgerBtn.setAttribute("aria-expanded", String(!expanded));
      menu.setAttribute("aria-hidden", String(expanded));
      menu.hidden = expanded;
      setMenuTabbable(!expanded);
    });
    // Ensure menu is hidden initially
    menu.setAttribute("aria-hidden", "true");
    menu.hidden = true;
    setMenuTabbable(false);

    document.addEventListener("click", (e) => {
      if (!nav.contains(e.target as Node)) {
        menu.setAttribute("aria-hidden", "true");
        menu.hidden = true;
        setMenuTabbable(false);
      }
    });
  }

  // Hide header on scroll down, show on scroll up

  const headerHide = document.querySelector("header");
  let lastScrollY = window.scrollY;
  let ticking = false;

  function onScroll() {
    if (!headerHide) return;
    const currentScrollY = window.scrollY;
    if (currentScrollY > 410) {
      headerHide.classList.add("header--scrolled");
    } else {
      headerHide.classList.remove("header--scrolled");
    }
    ticking = false;
  }
  window.addEventListener("scroll", () => {
    if (!ticking) {
      window.requestAnimationFrame(onScroll);
      ticking = true;
    }
  });

  // Set initial state on load
  if (headerHide) {
    if (window.scrollY > 460) {
      headerHide.classList.add("header--scrolled");
    } else {
      headerHide.classList.remove("header--scrolled");
    }
  }

  // Handle focus out to close menu
    if (menu && hamburgerBtn) {
  menu.addEventListener("focusout", (e) => {
    // @ts-ignore
    const next = e.relatedTarget;
    if (
      next &&
      !menu.contains(next as Node) &&
      !hamburgerBtn.contains(next as Node)
    ) {
      hamburgerBtn.setAttribute("aria-expanded", "false");
      menu.setAttribute("aria-hidden", "true");
      menu.hidden = true;
      setMenuTabbable(false);
    }
  });
}


</script>

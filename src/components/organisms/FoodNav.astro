---
import FoodIcon from "../atoms/icons/FoodIcon.astro";

const categories: string[] = Astro.props.categories ?? [];
// Map display/type names to FoodIcon keys (all lowercase for robust matching)
const iconMap: Record<string, string> = {
  "nem": "nem",
  "bobun": "bobun",
  "sandwich banh mi": "sandwich",
  "burger": "burger",
  "burger banh mi": "burger",
  "plat principal": "plat",
  "menu enfant": "kid",
  "dessert": "dessert",
  "side": "side",
  "boisson": "boisson",
};
---

<nav class="food-nav">
  <div class="food-tags">
    <ul>
      {
        categories.map((cat: string) => {
          const normalizedCat = cat.trim().toLowerCase();
          const iconSlug =
            iconMap[normalizedCat] ?? normalizedCat.replace(/\s+/g, "");
          return (
            <li>
              <a
                class="food-link"
                href={`#${cat.toLowerCase().replace(/\s+/g, "-")}`}
              >
                <FoodIcon icon={iconSlug} ariaLabel={cat} />
                {cat}
              </a>
            </li>
          );
        })
      }
    </ul>
  </div>
</nav>
<style>
  .food-nav {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 0rem;
    position: sticky;
    top: 0;
    z-index: 1000;
    background: rgba(255, 255, 255, 0.25);
    backdrop-filter: blur(16px) saturate(180%);
    -webkit-backdrop-filter: blur(16px) saturate(180%);
    box-shadow:
      0 -2px 16px 0 rgba(0, 0, 0, 0.1),
      inset 0 1px 8px 0 rgba(255, 255, 255, 0.1);
    transition: transform .8s cubic-bezier(0.4,0,0.2,1), opacity .4s;
    opacity: 1;
    pointer-events: auto;
  }

  .food-nav.food-nav--hidden {
    opacity: 0;
    pointer-events: none;
    transform: translateY(-40px);
  }


  .food-nav.scroll-up {
    transform: translateY(60px);

  }

  .food-tags ul {
    display: flex;
    flex-direction: row;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.5rem;
    padding: 1rem;
    justify-content: center;
  }

  .food-link {
    display: flex;
    align-items: center;
    width: fit-content;
    gap: 0.8rem;
    flex-direction: row;
    justify-content: center;
    border-radius: .5rem;
    padding: 0.5rem 1.3rem;

    text-decoration: none;
    white-space: nowrap;

    color: var(--secondary-700);
    background-color: var(--primary-500);
  }

  .food-link.active {
    background-color: var(--secondary-500);
    color: var(--primary-500);
  }

  .food-link:hover {
   background-color: var(--secondary-500);
    color: var(--primary-500);
  }

.food-link:focus-visible, a.food-link:focus-visible {
    outline: 2px solid var(--secondary-500) ;
    outline-offset: 2px ;
  }

  .food-link svg {
    min-width: 1.5rem;
    min-height: 1.5rem;
  }

  @media screen and (max-width: 768px) {
    .food-nav {
      overflow: hidden;
      width: 100vw;
      height: 70px;
      z-index: 1000;
      margin: 0;
      padding: .5rem 0 .5rem 0;
    }

    .food-tags.narrow {
      all: unset;
    }

    .food-tags ul {
      width: 100vw;
      display: flex;
      justify-content: flex-start;
      flex-wrap: nowrap;
      overflow-x: auto;
      overflow-y: hidden;
      gap: 1rem;
      padding: 0 1rem;
      margin: 0;
          scroll-behavior: smooth;

    }

    .food-tags ul::-webkit-scrollbar {
      display: none;
    }
  }
</style>

<script>

// Efficient scroll spy using requestAnimationFrame
let ticking = false;


const sections = Array.from(document.querySelectorAll("section[id]"));
let lastActiveId = null;

function centerActiveLink(link) {
  const ul = link.closest("ul");
  if (ul && window.innerWidth <= 768) {
    const ulRect = ul.getBoundingClientRect();
    const linkRect = link.getBoundingClientRect();
    const scrollLeft = ul.scrollLeft + (linkRect.left + linkRect.width / 2) - (ulRect.left + ulRect.width / 2);
    ul.scrollTo({ left: scrollLeft });
    if (typeof ul.scrollTo !== 'function') {
      link.scrollIntoView({ inline: 'center', block: 'nearest' });
    }
  }
}



function scrollTracker() {
  const currentYScroll = window.scrollY;
  let activeLink = null;
  let activeId = null;
  // Always remove 'active' from all links first
  document.querySelectorAll('.food-link.active').forEach(link => link.classList.remove('active'));
// Remove sticky :active/focus from food-link after tap/click (mobile)
window.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('.food-link').forEach(link => {
    link.addEventListener('touchend', () => link.blur(), { passive: true });
    link.addEventListener('click', () => link.blur(), { passive: true });
  });
});
  sections.forEach((section) => {
    const s = section;
    const sectionHeight = (s).offsetHeight;
    const sectionTop = (s).offsetTop - 300; // adjust for sticky nav
    const id = s.getAttribute("id");
    const currentNavLink = document.querySelector(`.food-link[href="#${id}"]`);
    if (
      currentYScroll > sectionTop &&
      currentYScroll <= sectionTop + sectionHeight
    ) {
      currentNavLink?.classList.add("active");
      activeLink = currentNavLink;
      activeId = id;
    }
  });
  if (activeLink && activeId !== lastActiveId) {
    centerActiveLink(activeLink);
    lastActiveId = activeId;
  }
  ticking = false;
}

window.addEventListener("scroll", function() {
  if (!ticking) {
    window.requestAnimationFrame(scrollTracker);
    ticking = true;
  }
});

let lastScrollY = window.scrollY;
const nav = document.querySelector('.food-nav');

window.addEventListener('scroll', () => {
  if (!nav) return;
  const currentScrollY = window.scrollY;
  if (currentScrollY < lastScrollY) {
    nav.classList.add('scroll-up');
  } else {
    nav.classList.remove('scroll-up');
  }
  lastScrollY = currentScrollY;
});



// Hide FoodNav until scrollY > 500px
window.addEventListener('DOMContentLoaded', function() {
  const nav = document.querySelector('.food-nav');
  function toggleNavVisibility() {
    if (!nav) return;
    if (window.scrollY > 650) {
      nav.classList.remove('food-nav--hidden');
    } else {
      nav.classList.add('food-nav--hidden');
    }
  }
  window.addEventListener('scroll', toggleNavVisibility);
  toggleNavVisibility();
});
</script>
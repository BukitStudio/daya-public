---
import FoodIcon from "../atoms/icons/FoodIcon.astro";

const categories: string[] = Astro.props.categories ?? [];
// Map display/type names to FoodIcon keys
const iconMap: Record<string, string> = {
  Nem: "nem",
  Bobun: "bobun",
  Sandwich: "sandwich",
  "Sandwich Banh Mi": "sandwich",
  Burger: "burger",
  "Burger Banh Mi": "burger",
  "Plat principal": "plat",
  "Menu enfant": "kid",
  "Menu Enfant": "kid",
  Dessert: "dessert",
  Accompagnement: "side",
  Boisson: "boisson",
};
---

<nav class="food-nav">
  <div class="food-tags narrow">
    <ul>
      {
        categories.map((cat: string) => {
          const iconSlug =
            iconMap[cat] ?? cat.toLowerCase().replace(/\s+/g, "");
          return (
            <li>
              <a
                class="food-link"
                href={`#${cat.toLowerCase().replace(/\s+/g, "-")}`}
              >
                <FoodIcon icon={iconSlug} ariaLabel={cat} />
                {cat}
              </a>
            </li>
          );
        })
      }
    </ul>
  </div>
</nav>
<style>
  .food-nav {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    padding: 0rem;
    position: sticky;
    top: 0;
    z-index: 1000;

    background: rgba(255, 255, 255, 0.25);
    /* backdrop-filter: blur(16px) saturate(180%); */
    /* -webkit-backdrop-filter: blur(16px) saturate(180%);
    box-shadow:
      0 -2px 16px 0 rgba(0, 0, 0, 0.1),
      inset 0 1px 8px 0 rgba(255, 255, 255, 0.1); */
  }

  .food-tags ul {
    display: flex;
    flex-direction: row;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.5rem;
    padding: 1rem;
    justify-content: center;
    scroll-behavior: smooth;
  }

  .food-link {
    display: flex;
    align-items: center;
    width: fit-content;
    gap: 0.8rem;
    flex-direction: row;
    justify-content: center;
    border-radius: .5rem;
    padding: 0.6rem 1.3rem;

    text-decoration: none;
    white-space: nowrap;

    color: var(--secondary-700);
    background-color: var(--primary-500);
  }

  .food-link.active {
    background-color: var(--secondary-500);
    color: var(--primary-500);
  }

  .food-link:hover {
   background-color: var(--secondary-500);
    color: var(--primary-500);
  }

  .food-link:focus-visible {
    outline: 2px solid var(--primary-700);
    outline-offset: 2px;
  }

  .food-link svg {
    min-width: 2rem;
    min-height: 2rem;
  }

  @media screen and (max-width: 768px) {
    .food-nav {
      overflow: hidden;
      width: 100vw;
      z-index: 1000;
      margin: 0;
      padding: 1.5rem 0 1.5rem 0;
    }

    .food-tags.narrow {
      all: unset;
    }

    .food-tags ul {
      width: 100vw;
      display: flex;
      justify-content: flex-start;
      flex-wrap: nowrap;
      overflow-x: auto;
      overflow-y: hidden;
      gap: 1rem;
      padding: 0 1rem;
      margin: 0;
    }

    .food-tags ul::-webkit-scrollbar {
      display: none;
    }
  }
</style>

<script>
  if (typeof window !== "undefined") {
  
    // Use native scrollIntoView for smooth scrolling to section
    document.addEventListener("DOMContentLoaded", function () {
      const links = Array.from(
        document.querySelectorAll(".food-link")
      ) as HTMLAnchorElement[];
      // Select sections with id matching nav hashes
      const sections = Array.from(
        document.querySelectorAll("section[id]")
      ).filter((s) =>
        links.some((l) => l.hash === `#${s.id}`)
      ) as HTMLElement[];
      console.log(
        "FoodNav debug: found links",
        links.map((l) => l.hash)
      );
      console.log(
        "FoodNav debug: found sections",
        sections.map((s) => s.id)
      );
      let isClickingNav = false;
      function setActive(link: HTMLAnchorElement | null) {
        links.forEach((l) => l.classList.remove("active"));
        if (link) {
          link.classList.add("active");
          // Center active link in scroll container on mobile
          const ul = link.closest("ul");
          if (ul && window.innerWidth <= 768) {
            // Calculate scroll position to center the link
            const ulRect = ul.getBoundingClientRect();
            const linkRect = link.getBoundingClientRect();
            const scrollLeft = ul.scrollLeft + (linkRect.left + linkRect.width / 2) - (ulRect.left + ulRect.width / 2);
            ul.scrollTo({ left: scrollLeft, behavior: "smooth" });
          }
        }
      }
      const observer = new window.IntersectionObserver(
        (entries) => {
          if (isClickingNav) return;
          // Find the visible section closest to the top (smallest positive top)
          let closest: HTMLElement | null = null;
          let minTop = Infinity;
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const target = entry.target as HTMLElement;
              const top = target.getBoundingClientRect().top;
              if (top < minTop) {
                minTop = top;
                closest = target;
              }
            }
          });
          if (closest) {
            const id = closest.id;
            const activeLink = links.find((link) => link.hash === `#${id}`);
            setActive(activeLink ?? null);
          }
        },
        {
          rootMargin: "-150px 0px 0px 0px",
          threshold: 0.1,
        }
      );
      sections.forEach((section) => observer.observe(section));
      // Set active on click for instant feedback
      links.forEach((link) => {
        link.addEventListener("click", () => {
          isClickingNav = true;
          setActive(link);
          setTimeout(() => {
            isClickingNav = false;
          }, 600);
        });
      });
    });
  }
</script>

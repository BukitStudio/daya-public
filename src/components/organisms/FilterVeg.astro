---
import SwitchVeg from "../atoms/SwitchVeg.astro";
---

<div class ="filter-switch-container mt2 ">

<div class="filter-switch narrow">
  <p class="mb0">Mode végétarien <span id="veg-mode-status" ></span></p>
  <SwitchVeg id="filter-switch" />
</div>

</div>
<style>
  .filter-switch-container{
    background: var(--primary-600);
    padding: 1rem 2rem;
    transition: transform .8s cubic-bezier(0.4,0,0.2,1);
  }
  .filter-switch-container.scroll-up {
    transform: translateY(60px);
  }
  .filter-switch{
    display: flex;
    justify-content: space-between;
    align-items: center;
    -webkit-tap-highlight-color: transparent;
}
@media screen and (max-width: 768px) {
    .filter-switch-container{
      padding: 0.5rem 1rem;
    }
}

:global(.hidden-product) {
  display: none !important;
}

</style>

<script>
// Wait for DOM and Astro hydration
window.addEventListener('DOMContentLoaded', function() {
  // Use setTimeout to ensure SwitchVeg is rendered
  setTimeout(function() {
    const filterSwitch = document.getElementById('filter-switch');
    if (!filterSwitch || filterSwitch.tagName !== 'INPUT') return;
    const checkbox = filterSwitch as HTMLInputElement;
    function updateFilter() {
      // Select all product <li> elements directly under .products-list
      const items = document.querySelectorAll('.products-list > li');
      if (!(checkbox as HTMLInputElement).checked) {
        // Remove hidden-product from all items
        items.forEach(li => {
          li.classList.remove('hidden-product');
        });
        // Show all product sections
        document.querySelectorAll('.product-section').forEach(section => {
          (section as HTMLElement).style.display = '';
        });
        // Show all FoodNav links
        document.querySelectorAll('.food-nav a.food-link').forEach(link => {
          (link as HTMLElement).style.display = '';
        });
      } else {
        items.forEach(li => {
          const item = li as HTMLElement;
          const cat = item.dataset.category || '';
          if (cat.includes('veg')) {
            item.classList.remove('hidden-product');
          } else {
            item.classList.add('hidden-product');
          }
        });
        // Sync FoodNav links with visible product sections
        document.querySelectorAll('.product-section').forEach(section => {
          const sectionEl = section as HTMLElement;
          const list = sectionEl.querySelector('.products-list') as HTMLElement | null;
          if (!list) return;
          // Only count <li> that are not display:none (works for grid/flex)
          const hasVisible = Array.from(list.children).some(li => {
            const el = li as HTMLElement;
            return window.getComputedStyle(el).display !== 'none';
          });
          sectionEl.style.display = hasVisible ? '' : 'none';
          // Hide/show FoodNav link matching this section
          const sectionId = sectionEl.id;
          if (sectionId) {
            // Look for nav links with href="#sectionId"
            const navLink = document.querySelector(`.food-nav a[href="#${sectionId}"]`);
            if (navLink) {
              (navLink as HTMLElement).style.display = hasVisible ? '' : 'none';
            }
          }
        });
      }
      // Update veg mode status
      const status = document.getElementById('veg-mode-status');
      if (status) {
        status.textContent = checkbox.checked ? 'on' : 'off';
      }
    }
    checkbox.addEventListener('change', updateFilter);
    // Initial state
    updateFilter();
  }, 0);
});


</script>

